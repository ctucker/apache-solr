Index: src/java/org/apache/solr/update/AddUpdateCommand.java
===================================================================
--- src/java/org/apache/solr/update/AddUpdateCommand.java	(revision 701732)
+++ src/java/org/apache/solr/update/AddUpdateCommand.java	(working copy)
@@ -42,6 +42,10 @@
    public boolean allowDups;
    public boolean overwritePending;
    public boolean overwriteCommitted;
+   
+   
+   public int commitWithin = -1;
+   
 
    /** Reset state to reuse this object with a different document in the same request */
    public void clear() {
Index: src/java/org/apache/solr/update/DirectUpdateHandler2.java
===================================================================
--- src/java/org/apache/solr/update/DirectUpdateHandler2.java	(revision 701732)
+++ src/java/org/apache/solr/update/DirectUpdateHandler2.java	(working copy)
@@ -198,7 +198,7 @@
       synchronized (this) {
         // adding document -- prep writer
         openWriter();
-        tracker.addedDocument();
+        tracker.addedDocument( cmd.commitWithin );
       } // end synchronized block
 
       // this is the only unsynchronized code in the iwAccess block, which
@@ -424,7 +424,7 @@
       SolrCore.log.info("AutoCommit: " + this);
     }
 
-    /** schedeule individual commits */
+    /** schedule individual commits */
     public synchronized void scheduleCommitWithin(long commitMaxTime) 
     {
       // Check if there is a commit already scheduled for longer then this time
@@ -443,30 +443,22 @@
     
     /** Indicate that documents have been added
      */
-    public void addedDocument() {
+    public void addedDocument( int commitWithin ) {
       docsSinceCommit++;
       lastAddedTime = System.currentTimeMillis();
       // maxDocs-triggered autoCommit
       if( docsUpperBound > 0 && (docsSinceCommit > docsUpperBound) ) {
-        if (pending != null && 
-            pending.getDelay(TimeUnit.MILLISECONDS) > DOC_COMMIT_DELAY_MS) {
-          // another commit is pending, but too far away (probably due to
-          // maxTime)
-          pending.cancel(false);
-          pending = null;
-        }
-        if (pending == null) {
-          // 1/4 second seems fast enough for anyone using maxDocs
-          pending = scheduler.schedule(this, DOC_COMMIT_DELAY_MS, 
-                                       TimeUnit.MILLISECONDS);
-        }
+        scheduleCommitWithin( DOC_COMMIT_DELAY_MS );
       }
+      
       // maxTime-triggered autoCommit
-      if( pending == null && timeUpperBound > 0 ) { 
-        // Don't start a new event if one is already waiting 
-        pending = scheduler.schedule( this, timeUpperBound, TimeUnit.MILLISECONDS );
+      long ctime = timeUpperBound;
+      if( commitWithin > 0 && (ctime < 0 || commitWithin < ctime) ) {
+        ctime = commitWithin;
       }
-      
+      if( ctime > 0 ) {
+        scheduleCommitWithin( ctime );
+      }
     }
 
     /** Inform tracker that a commit has occurred, cancel any pending commits */
Index: src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
===================================================================
--- src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java	(revision 701732)
+++ src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java	(working copy)
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.io.Reader;
+import java.io.StringReader;
 import java.io.Writer;
 import java.io.File;
 import java.util.HashMap;
@@ -72,6 +73,7 @@
   public static final String WAIT_FLUSH = "waitFlush";
   
   public static final String OVERWRITE = "overwrite";
+  public static final String COMMIT_WITHIN = "commitWithin"; 
   public static final String OVERWRITE_COMMITTED = "overwriteCommitted"; // @Deprecated
   public static final String OVERWRITE_PENDING = "overwritePending";  // @Deprecated
   public static final String ALLOW_DUPS = "allowDups"; 
@@ -120,6 +122,12 @@
       for( ContentStream stream : req.getContentStreams() ) {
         Reader reader = stream.getReader();
         try {
+          if( log.isTraceEnabled() ) {
+            String body = IOUtils.toString( reader );
+            log.trace( "body", body );
+            reader = new StringReader( body );
+          }
+          
           XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);
           this.processUpdate( processor, parser );
         }
@@ -169,6 +177,8 @@
                 overwrite = StrUtils.parseBoolean(attrVal);
               } else if (ALLOW_DUPS.equals(attrName)) {
                 overwrite = !StrUtils.parseBoolean(attrVal);
+              } else if ( COMMIT_WITHIN.equals(attrName) ) {
+                addCmd.commitWithin = Integer.parseInt( attrVal );
               } else if ( OVERWRITE_PENDING.equals(attrName) ) {
                 overwritePending = StrUtils.parseBoolean(attrVal);
               } else if ( OVERWRITE_COMMITTED.equals(attrName) ) {
Index: client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTests.java
===================================================================
--- client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTests.java	(revision 701732)
+++ client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTests.java	(working copy)
@@ -29,6 +29,7 @@
 import org.apache.solr.client.solrj.request.DirectXmlRequest;
 import org.apache.solr.client.solrj.request.LukeRequest;
 import org.apache.solr.client.solrj.request.SolrPing;
+import org.apache.solr.client.solrj.request.UpdateRequest;
 import org.apache.solr.client.solrj.response.LukeResponse;
 import org.apache.solr.client.solrj.response.QueryResponse;
 import org.apache.solr.client.solrj.response.FacetField;
@@ -149,8 +150,8 @@
     Assert.assertEquals(2, response.getResults().getNumFound() );
     Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());
   }
-  
 
+
   /**
    * query the example
    */
@@ -195,8 +196,40 @@
     rsp = server.query( query );
     Assert.assertEquals( 2, rsp.getResults().getNumFound() );
     System.out.println( rsp.getResults() );
+    
   }
   
+  /**
+   * query the example
+   */
+  public void testCommitWithin() throws Exception
+  {    
+    // make sure it is empty...
+    SolrServer server = getSolrServer();
+    QueryResponse rsp = server.query( new SolrQuery( "*:*") );
+    Assert.assertEquals( 0, rsp.getResults().getNumFound() );
+
+    // Now try a timed commit...
+    SolrInputDocument doc3 = new SolrInputDocument();
+    doc3.addField( "id", "id3", 1.0f );
+    doc3.addField( "name", "doc3", 1.0f );
+    doc3.addField( "price", 10 );
+    UpdateRequest up = new UpdateRequest();
+    up.add( doc3 );
+    up.setCommitWithin( 5 );
+    up.process( server );
+    
+    rsp = server.query( new SolrQuery( "*:*") );
+    Assert.assertEquals( 0, rsp.getResults().getNumFound() );
+    
+    Thread.sleep( 500 ); // wait 1/2 seconds...
+
+    // now check that it comes out...
+    rsp = server.query( new SolrQuery( "id:id3") );
+    Assert.assertEquals( 1, rsp.getResults().getNumFound() );
+  }
+  
+  
   protected void assertNumFound( String query, int num ) throws SolrServerException, IOException
   {
     QueryResponse rsp = getSolrServer().query( new SolrQuery( query ) );
Index: client/java/solrj/src/org/apache/solr/client/solrj/request/UpdateRequest.java
===================================================================
--- client/java/solrj/src/org/apache/solr/client/solrj/request/UpdateRequest.java	(revision 701732)
+++ client/java/solrj/src/org/apache/solr/client/solrj/request/UpdateRequest.java	(working copy)
@@ -51,6 +51,7 @@
   private List<String> deleteQuery = null;
 
   private ModifiableSolrParams params;
+  private int commitWithin = -1;
   
   public UpdateRequest()
   {
@@ -163,7 +164,12 @@
   public String getXML() throws IOException {
     StringWriter writer = new StringWriter();
     if( documents != null && documents.size() > 0 ) {
-      writer.write("<add>");
+      if( commitWithin > 0 ) {
+        writer.write("<add commitWithin=\""+commitWithin+"\">");
+      }
+      else {
+        writer.write("<add>");
+      }
       for (SolrInputDocument doc : documents ) {
         if( doc != null ) {
           ClientUtils.writeXML( doc, writer );
@@ -245,4 +251,12 @@
   public void setWaitSearcher(boolean waitSearcher) {
     setParam( UpdateParams.WAIT_SEARCHER, waitSearcher+"" );
   }
+
+  public int getCommitWithin() {
+    return commitWithin;
+  }
+
+  public void setCommitWithin(int commitWithin) {
+    this.commitWithin = commitWithin;
+  }
 }
